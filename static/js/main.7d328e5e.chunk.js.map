{"version":3,"sources":["stats-funcs/func.js","chartRender/chart-render.js","stats-funcs/stats-calculator.js","App.js","reportWebVitals.js","index.js"],"names":["decimalAdjust","type","value","exp","Math","isNaN","NaN","toString","split","floor10","ceil10","colors","CartesianChart","resultSet","children","ChartComponent","barCategoryGap","ResponsiveContainer","width","height","data","XAxis","dataKey","YAxis","CartesianGrid","Legend","Tooltip","TypeToChart","frequencyArr","rawArr","chartType","LineChart","Line","stackId","stroke","activeDot","r","min","max","bars","length","n","results","a","interval","result","i","push","filter","d","chunkify","map","range","frequency","key","toFixed","BarChart","Bar","fill","StatsCalculator","input","str","arr","items","forEach","total","Object","keys","x","reduce","prev","curr","values","sortedArr","sort","b","countString","trim","replace","mean","median","floor","sDev","sqrt","pow","entries","mode","q1","q3","IQR","App","useState","setInput","setChartType","stats","className","Box","p","FormControl","flexDirection","TextField","onChange","e","target","placeholder","fullWidth","label","select","id","MenuItem","style","padding","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d328e5e.chunk.js","sourcesContent":["export const countString = (str) => {\r\n  const arr = str.split(\" \");\r\n  const items = {};\r\n  arr.forEach((i) => {\r\n    items[i] = (items[i] || 0) + 1;\r\n  });\r\n  const total = +Object.keys(items)[0]\r\n    ? arr.map((x) => +x).reduce((prev, curr) => prev + curr)\r\n    : Object.values(items).reduce((prev, curr) => prev + curr);\r\n  const sortedArr = +Object.keys(items)[0]\r\n  ? arr.map((x) => +x).sort((a, b) => a - b)\r\n  : arr\r\n  return {\r\n    total,\r\n    items,\r\n    arr:sortedArr\r\n  };\r\n};\r\nexport const parseString = (str) => {\r\n  const replaceSpace = str.trim().replace(/\\s\\s+/g, ' ')\r\n  const replaceComma = replaceSpace.replace(/,/g, \"\");\r\n  const parsedString = replaceComma.replace(/(\\r\\n|\\r|\\n)|\\t/g, \" \");\r\n  return parsedString;\r\n};\r\n\r\nexport function chunkify(a, n) {\r\n  if (n < 2) return [a];\r\n\r\n  const max = Math.max(...a);\r\n  const min = Math.min(...a)\r\n  const interval = ceil10(((max-min)/(n+1)), -6)\r\n  let result = []\r\n\r\n  // let len = a.length,\r\n  //   out = [],\r\n  //   i = 0,\r\n  //   size;\r\nn=0\r\n  for (let i = min; i < max; i+= interval) {\r\n    result.push(a.filter(function(d){\r\n      return ((i+interval > d) && d >= i);  // check if the number between lower and upper bound\r\n      }));\r\n    }\r\n  // if (len % n === 0) {\r\n  //   size = Math.floor(len / n);\r\n  //   while (i < len) {\r\n  //     out.push(a.slice(i, (i += size)));\r\n  //   }\r\n  // } else if (balanced) {\r\n  //   while (i < len) {\r\n  //     size = Math.ceil((len - i) / n--);\r\n  //     out.push(a.slice(i, (i += size)));\r\n  //   }\r\n  // } else {\r\n  //   n--;\r\n  //   size = Math.floor(len / n);\r\n  //   if (len % size === 0) size--;\r\n  //   while (i < size * n) {\r\n  //     out.push(a.slice(i, (i += size)));\r\n  //   }\r\n  //   out.push(a.slice(size * n));\r\n  // }\r\n  return result;\r\n}\r\n\r\nfunction decimalAdjust(type, value, exp) {\r\n  // If the exp is undefined or zero...\r\n  if (typeof exp === 'undefined' || +exp === 0) {\r\n    return Math[type](value);\r\n  }\r\n  value = +value;\r\n  exp = +exp;\r\n  // If the value is not a number or the exp is not an integer...\r\n  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\r\n    return NaN;\r\n  }\r\n  // Shift\r\n  value = value.toString().split('e');\r\n  value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\r\n  // Shift back\r\n  value = value.toString().split('e');\r\n  return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\r\n}\r\n\r\nconst round10 = (value, exp) => decimalAdjust('round', value, exp);\r\nexport const floor10 = (value, exp) => decimalAdjust('floor', value, exp);\r\nexport const ceil10 = (value, exp) => decimalAdjust('ceil', value, exp);\r\n","import React from \"react\";\r\n\r\nimport {\r\n  CartesianGrid,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  BarChart,\r\n  Bar,\r\n  LineChart,\r\n  Line,\r\n} from \"recharts\";\r\nimport { chunkify, floor10 } from \"../stats-funcs/func\";\r\n\r\nconst colors = [\"#FF6492\", \"#141446\", \"#7A77FF\"];\r\n\r\nconst CartesianChart = ({\r\n  resultSet,\r\n  children,\r\n  ChartComponent,\r\n  barCategoryGap,\r\n}) => (\r\n  <ResponsiveContainer width=\"100%\" height={350}>\r\n    <ChartComponent data={resultSet} barCategoryGap={barCategoryGap}>\r\n      <XAxis dataKey=\"key\" />\r\n      <YAxis />\r\n      <CartesianGrid />\r\n      {children}\r\n      <Legend />\r\n      <Tooltip />\r\n    </ChartComponent>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport const TypeToChart = ({ frequencyArr, rawArr, chartType }) => {\r\n  switch (chartType) {\r\n    case \"line\":\r\n      return (\r\n        <CartesianChart ChartComponent={LineChart} resultSet={frequencyArr}>\r\n          <Line\r\n            stackId=\"a\"\r\n            dataKey=\"frequency\"\r\n            stroke={colors[0]}\r\n            activeDot={{ r: 8 }}\r\n          />\r\n        </CartesianChart>\r\n      );\r\n    case \"histogram\":     //TODO add bar chartm dot plot, pie chart option\r\n      const min = Math.min(...rawArr)\r\n      const max = Math.max(...rawArr)\r\n      const bars = rawArr.length <= 9 ? rawArr.length : 7\r\n      let n = 0\r\n      const results = chunkify(rawArr, 6).map((range) => {\r\n        n+=1\r\n        const rangeFrequency = range.length\r\n        return { frequency: rangeFrequency, key: `${n === 1 ? min : (floor10(((max - min)/bars), -2) * (n-1) + min).toFixed()}-${(floor10(((max - min)/bars), -2) * n + min).toFixed()}` };\r\n      });\r\n      return (\r\n        <CartesianChart\r\n          ChartComponent={BarChart}\r\n          resultSet={rawArr.length <= 9 ? frequencyArr : results}\r\n          barCategoryGap={0}\r\n        >\r\n          <Bar stackId=\"a\" dataKey=\"frequency\" fill={colors[0]} />;\r\n        </CartesianChart>\r\n      );\r\n  }\r\n};\r\n","import { countString, parseString } from \"./func\";\r\n\r\nconst StatsCalculator = (input) => {\r\n  const data = parseString(input);\r\n  const { total, items, arr } = countString(data);\r\n  const n = arr.length;\r\n  const mean = total / n;\r\n  const median =\r\n    n % 2 === 0\r\n      ? (+arr[Math.floor(n / 2 - 1)] + arr[Math.floor(n / 2)]) / 2\r\n      : +arr[Math.floor(n / 2)];\r\n  const sDev = Math.sqrt(\r\n    arr.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / (n - 1)\r\n  );\r\n  const frequencyArr = Object.entries(items).map(([key, frequency]) => ({\r\n    key,\r\n    frequency,\r\n  }));\r\n  const mode = frequencyArr\r\n    .filter((i) => i.frequency === Math.max(...Object.values(items)))\r\n    .map(({ key }) => key);\r\n  const min = Math.min(...arr);\r\n  const max = Math.max(...arr);\r\n  const range = max - min;\r\n  const q1 =\r\n    n % 4 === 0 || (n-1) % 4 === 0\r\n      ? (+arr[Math.floor(n / 4 - 1)] + arr[Math.floor(n / 4)]) / 2\r\n      : arr[Math.floor(n / 4)];\r\n  const q3 =\r\n  (n-1) % 4 === 0\r\n  ? (+arr[Math.floor(3 * n / 4 + 1)] + arr[Math.floor(3 * n / 4)]) / 2\r\n  : n % 4 === 0 ? (+arr[Math.floor(3 * n / 4 - 1)] + arr[Math.floor(3 * n / 4)]) / 2 : arr[Math.floor(3 * n / 4)];\r\n  const IQR = q3 - q1;\r\n  return { n, mean: mean.toFixed(2), median, mode, frequencyArr, sDev: sDev.toFixed(2), range, q1, q3, IQR, arr };\r\n};\r\nexport default StatsCalculator;\r\n","import {\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n  InputLabel,\r\n  Box,\r\n  FormControl,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { renderChart, TypeToChart } from \"./chartRender/chart-render\";\r\nimport StatsCalculator from \"./stats-funcs/stats-calculator\";\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [chartType, setChartType] = useState(\"\");\r\n  const {frequencyArr, arr, ...stats} = StatsCalculator(input);\r\n  return (\r\n    <div className=\"App\">\r\n      <Box p={2}>\r\n        <FormControl>\r\n          <Box flexDirection=\"row\">\r\n            <TextField\r\n              type=\"text\"\r\n              onChange={(e) => {\r\n                setInput(e.target.value);\r\n              }}\r\n              value={input}\r\n              placeholder=\"Data\"\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Chart Type\"\r\n              select\r\n              id=\"chart type\"\r\n              value={chartType}\r\n              onChange={(e) => {\r\n                setChartType(e.target.value);\r\n              }}\r\n            >\r\n              <MenuItem value=\"line\">Line Chart</MenuItem>\r\n              <MenuItem value=\"histogram\">Histogram</MenuItem>\r\n            </TextField>\r\n          </Box>\r\n        </FormControl>\r\n      </Box>\r\n      <ol style={{padding: \"0px 16px\"}}>\r\n        {input &&\r\n          Object.entries(stats).map(([key, value]) => <div style={{margin: \"4px 0px\"}}>{`${key}: ${value}`}</div> )}\r\n      </ol>\r\n      {input && chartType && (\r\n        <TypeToChart frequencyArr={frequencyArr} rawArr={arr} chartType={chartType} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}